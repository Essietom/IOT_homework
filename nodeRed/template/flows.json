[
    {
        "id": "a85d1d668cd9bcf6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "24222a60640c82cd",
        "type": "comment",
        "z": "a85d1d668cd9bcf6",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "b863b6cb3cc03209",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "realTimeValue",
        "func": "// Create a Date object from the payload\n// msg.payload = {Time: new Date(), radiation: msg.payload, Tab: 'area1'}\n// Return the message so it can be sent on\nreturn {value:Number(msg.payload).toFixed(2)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "23f865948d1607c3"
            ]
        ]
    },
    {
        "id": "5af569b1148a7ba4",
        "type": "mqtt in",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "topic": "radiation/R1",
        "qos": "2",
        "datatype": "auto",
        "broker": "0448a9d144c26a9e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "b863b6cb3cc03209",
                "905ee62e70adc639"
            ]
        ]
    },
    {
        "id": "23f865948d1607c3",
        "type": "ui_gauge",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "group": "fad7ac7d160e9492",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Radiation",
        "label": "Becquerel",
        "format": "{{value}}",
        "min": "50",
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "6012d43694287ccf",
        "type": "influxdb out",
        "z": "a85d1d668cd9bcf6",
        "influxdb": "b9536e6cc9184094",
        "name": "radiation_store",
        "measurement": "Becquerel",
        "precision": "",
        "retentionPolicy": "",
        "database": "radiation",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "h",
        "bucket": "radiation",
        "x": 840,
        "y": 320,
        "wires": []
    },
    {
        "id": "6780cf5c26e58df3",
        "type": "debug",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 360,
        "wires": []
    },
    {
        "id": "905ee62e70adc639",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "6012d43694287ccf",
                "6780cf5c26e58df3",
                "55278ea505f7f001",
                "e0d7a1e02b7c1e89"
            ]
        ]
    },
    {
        "id": "55278ea505f7f001",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "High radiation alert",
        "func": "\nif(msg.payload.radiation > 150)\n{\n    msg.topic = \"Subject: System radiation has been exceeded\";\n    msg.payload = \"Radiation:\" + String(msg.payload.radiation);\n    return msg\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e0d7a1e02b7c1e89",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "email_builder",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"essietom@gmail.com\";\nmsg.from=\"royal.tomi.eu@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"essietom@gmail.com\";\nmsg.from=\"royal.tomi.eu@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = Number(msg.payload)\nreturn msg;",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "59d327e259288d6e",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "realTimeValue",
        "func": "// Create a Date object from the payload\n// msg.payload = {Time: new Date(), radiation: msg.payload, Tab: 'area1'}\n// Return the message so it can be sent on\nreturn {value:Number(msg.payload).toFixed(2)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "dbb84be0f4cfba0c"
            ]
        ]
    },
    {
        "id": "a30884db18322ad0",
        "type": "mqtt in",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "topic": "flowRate/F1",
        "qos": "2",
        "datatype": "auto",
        "broker": "8dd81654889ca296",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 560,
        "wires": [
            [
                "59d327e259288d6e",
                "436fe0cfd5977441"
            ]
        ]
    },
    {
        "id": "dbb84be0f4cfba0c",
        "type": "ui_gauge",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "group": "fad7ac7d160e9492",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Flow Rate",
        "label": "cubic meters per seconds",
        "format": "{{value}}",
        "min": "50",
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 860,
        "y": 540,
        "wires": []
    },
    {
        "id": "9ec4f6dddd0067bf",
        "type": "influxdb out",
        "z": "a85d1d668cd9bcf6",
        "influxdb": "b9536e6cc9184094",
        "name": "flowrate_store",
        "measurement": "cubicmeterspersec",
        "precision": "",
        "retentionPolicy": "",
        "database": "radiation",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "h",
        "bucket": "flowrate",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "c03fcdf31fa0b942",
        "type": "debug",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "436fe0cfd5977441",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 620,
        "wires": [
            [
                "9ec4f6dddd0067bf",
                "c03fcdf31fa0b942",
                "744225fd01d26e01",
                "aa6f94dcac992f1f"
            ]
        ]
    },
    {
        "id": "744225fd01d26e01",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "Abnormal flowrate alert",
        "func": "\nif(msg.payload.flowrate < 50)\n{\n    msg.topic = \"Subject: Flow rate has dropped below normal level\";\n    msg.payload = \"Flowrate:\" + String(msg.payload.flowrate);\n    return msg\n}\nelse if(msg.payload.flowrate > 600){\n    msg.topic = \"Subject: Flow rate has risen above normal level\";\n    msg.payload = \"Flowrate:\" + String(msg.payload.flowrate);\n    return msg\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "aa6f94dcac992f1f",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "email_builder",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = Number(msg.payload)\nreturn msg;",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "aa5255bbda10d6a4",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "realTimeValue",
        "func": "// Create a Date object from the payload\n// msg.payload = {Time: new Date(), radiation: msg.payload, Tab: 'area1'}\n// Return the message so it can be sent on\nreturn {value:Number(msg.payload).toFixed(2)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 820,
        "wires": [
            [
                "8e972dd0c923c7f2"
            ]
        ]
    },
    {
        "id": "7f25698c1a233230",
        "type": "mqtt in",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "topic": "pressure/P1",
        "qos": "2",
        "datatype": "auto",
        "broker": "8dd81654889ca296",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 840,
        "wires": [
            [
                "aa5255bbda10d6a4",
                "297cd93245a05234"
            ]
        ]
    },
    {
        "id": "8e972dd0c923c7f2",
        "type": "ui_gauge",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "group": "fad7ac7d160e9492",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure",
        "label": "psi",
        "format": "{{value}}",
        "min": "0",
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 840,
        "y": 820,
        "wires": []
    },
    {
        "id": "8d6c36140c2638ee",
        "type": "influxdb out",
        "z": "a85d1d668cd9bcf6",
        "influxdb": "b9536e6cc9184094",
        "name": "pressure_store",
        "measurement": "psi",
        "precision": "",
        "retentionPolicy": "",
        "database": "radiation",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "h",
        "bucket": "pressure",
        "x": 820,
        "y": 880,
        "wires": []
    },
    {
        "id": "717f5ab222516296",
        "type": "debug",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 920,
        "wires": []
    },
    {
        "id": "297cd93245a05234",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 900,
        "wires": [
            [
                "8d6c36140c2638ee",
                "717f5ab222516296",
                "7bd2643e10fc74df",
                "0727ea9caf64fa42"
            ]
        ]
    },
    {
        "id": "7bd2643e10fc74df",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "High pressure alert",
        "func": "\nif(msg.payload.pressure > 150)\n{\n    msg.topic = \"Subject: Pressure is too high\";\n    msg.payload = \"Pressure:\" + String(msg.payload.pressure);\n    return msg\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "0727ea9caf64fa42",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "email_builder",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = Number(msg.payload)\nreturn msg;",
        "libs": [],
        "x": 870,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "bb61ef82929233f4",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "realTimeValue",
        "func": "// Create a Date object from the payload\n// msg.payload = {Time: new Date(), radiation: msg.payload, Tab: 'area1'}\n// Return the message so it can be sent on\nreturn {value:Number(msg.payload).toFixed(2)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1100,
        "wires": [
            [
                "ecd69c5ff7e9e92a"
            ]
        ]
    },
    {
        "id": "746b55592edbf2fd",
        "type": "mqtt in",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "topic": "waterChemistry/W1",
        "qos": "2",
        "datatype": "auto",
        "broker": "8dd81654889ca296",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "bb61ef82929233f4",
                "91d5f518430ddd02"
            ]
        ]
    },
    {
        "id": "ecd69c5ff7e9e92a",
        "type": "ui_gauge",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "group": "fad7ac7d160e9492",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Water Chemistry",
        "label": "ph value",
        "format": "{{value}}",
        "min": "1",
        "max": "10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 890,
        "y": 1100,
        "wires": []
    },
    {
        "id": "fc174b8f530b55a0",
        "type": "influxdb out",
        "z": "a85d1d668cd9bcf6",
        "influxdb": "b9536e6cc9184094",
        "name": "waterChemistry_store",
        "measurement": "ph",
        "precision": "",
        "retentionPolicy": "",
        "database": "radiation",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "h",
        "bucket": "waterchemistry",
        "x": 860,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d4a5a3391a6fb331",
        "type": "debug",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1200,
        "wires": []
    },
    {
        "id": "91d5f518430ddd02",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1180,
        "wires": [
            [
                "fc174b8f530b55a0",
                "d4a5a3391a6fb331",
                "f0c3bbd49c6d2cc8",
                "9a262077e76da21f"
            ]
        ]
    },
    {
        "id": "f0c3bbd49c6d2cc8",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "abnormal ph alert",
        "func": "\nif(msg.payload.waterChemistry < 5)\n{\n    msg.topic = \"Subject: Water is too Acidic\";\n    msg.payload = \"waterChemistry:\" + String(msg.payload.waterChemistry);\n    return msg\n}\nelse if(msg.payload.waterChemistry > 8)\n{\n    msg.topic = \"Subject: Water is too Alkaline\";\n    msg.payload = \"waterChemistry:\" + String(msg.payload.waterChemistry);\n    return msg\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "9a262077e76da21f",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "email_builder",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = Number(msg.payload)\nreturn msg;",
        "libs": [],
        "x": 890,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "b474e0896b74c9d2",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "realTimeValue",
        "func": "// Create a Date object from the payload\n// msg.payload = {Time: new Date(), radiation: msg.payload, Tab: 'area1'}\n// Return the message so it can be sent on\nreturn {value:Number(msg.payload).toFixed(2)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1400,
        "wires": [
            [
                "198a67a9e78361ed"
            ]
        ]
    },
    {
        "id": "c811da53706dd997",
        "type": "mqtt in",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "topic": "temperature/T1",
        "qos": "2",
        "datatype": "auto",
        "broker": "8dd81654889ca296",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 340,
        "y": 1420,
        "wires": [
            [
                "b474e0896b74c9d2",
                "da48c26e851ed123"
            ]
        ]
    },
    {
        "id": "198a67a9e78361ed",
        "type": "ui_gauge",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "group": "fad7ac7d160e9492",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature ",
        "label": "Degree Celcius",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 870,
        "y": 1400,
        "wires": []
    },
    {
        "id": "4413011b467cb56d",
        "type": "influxdb out",
        "z": "a85d1d668cd9bcf6",
        "influxdb": "b9536e6cc9184094",
        "name": "temperature_store",
        "measurement": "celcius",
        "precision": "",
        "retentionPolicy": "",
        "database": "radiation",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "h",
        "bucket": "temperature",
        "x": 850,
        "y": 1460,
        "wires": []
    },
    {
        "id": "491e2783ac94f5ed",
        "type": "debug",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1500,
        "wires": []
    },
    {
        "id": "da48c26e851ed123",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1480,
        "wires": [
            [
                "4413011b467cb56d",
                "491e2783ac94f5ed",
                "8a757bef5c45c3a6",
                "beb6f1a136db8083"
            ]
        ]
    },
    {
        "id": "8a757bef5c45c3a6",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "High temperature alert",
        "func": "\nif(msg.payload.temperature > 50)\n{\n    msg.topic = \"Subject: System temperature has been exceeded\";\n    msg.payload = \"Temperature:\" + String(msg.payload.temperature);\n    return msg\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "beb6f1a136db8083",
        "type": "function",
        "z": "a85d1d668cd9bcf6",
        "name": "email_builder",
        "func": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar temp=msg.payload;\nmsg.to=\"kcccryptoball@gmail.com\";\nmsg.from=\"chanmickyyun@gmail.com\";\n\nvar d = new Date();\nvar message = \"hello world\";\nmsg.topic = \"Temperature hello\";\nmsg.payload = \"Time: \" + d + message + msg.payload;\nreturn msg;",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = Number(msg.payload)\nreturn msg;",
        "libs": [],
        "x": 890,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "0448a9d144c26a9e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "172.17.0.3",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "fad7ac7d160e9492",
        "type": "ui_group",
        "name": "area",
        "tab": "a3aa9708baa5f099",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b9536e6cc9184094",
        "type": "influxdb",
        "hostname": "172.17.0.5",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb_store",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.4:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "8dd81654889ca296",
        "type": "mqtt-broker",
        "name": "",
        "broker": "172.17.0.3",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a3aa9708baa5f099",
        "type": "ui_tab",
        "name": "Flowrate sensors",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]